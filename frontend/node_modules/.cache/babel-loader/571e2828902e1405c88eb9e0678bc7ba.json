{"ast":null,"code":"import _toConsumableArray from \"/home/ankit/zil/cali-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/ankit/zil/cali-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ankit/zil/cali-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/ankit/zil/cali-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/ankit/zil/cali-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ankit/zil/cali-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var TZFinder =\n/*#__PURE__*/\nfunction () {\n  function TZFinder(zones) {\n    _classCallCheck(this, TZFinder);\n\n    this.index = void 0;\n    this.all = void 0;\n    this.index = this.createIndex(zones);\n    this.all = zones;\n  }\n\n  _createClass(TZFinder, [{\n    key: \"getAll\",\n    value: function getAll() {\n      return this.all;\n    }\n  }, {\n    key: \"createIndex\",\n    value: function createIndex(TZ) {\n      var index = [];\n\n      var _arr = Object.entries(TZ);\n\n      var _loop = function _loop() {\n        var _ref = _arr[_i];\n        _ref2 = _slicedToArray(_ref, 2);\n        var key = _ref2[0];\n        var values = _ref2[1];\n        values.forEach(function (value, localeIndex) {\n          var _value = _slicedToArray(value, 1),\n              locale = _value[0];\n\n          index.push({\n            str: TZFinder.splitUniq(key, locale),\n            val: value,\n            path: [key, localeIndex]\n          });\n        });\n      };\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var _ref2;\n\n        _loop();\n      }\n\n      return index;\n    }\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(word) {\n        var index,\n            obj,\n            re,\n            matches,\n            _iteratorNormalCompletion,\n            _didIteratorError,\n            _iteratorError,\n            _iterator,\n            _step,\n            _ref5,\n            _path,\n            _val,\n            _path2,\n            cont,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                index = _args.length > 1 && _args[1] !== undefined ? _args[1] : this.index;\n                obj = {};\n                re = new RegExp(word, \"i\");\n                matches = index.filter(function (_ref3) {\n                  var str = _ref3.str;\n                  return str.some(function (s) {\n                    return re.test(s);\n                  });\n                });\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 7;\n                _iterator = matches[Symbol.iterator]();\n\n              case 9:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _ref5 = _step.value;\n                _path = _ref5.path;\n                _val = _ref5.val;\n                _context.next = 15;\n                return new Promise(function (rs) {\n                  return setImmediate(rs);\n                });\n\n              case 15:\n                _path2 = _slicedToArray(_path, 1), cont = _path2[0];\n                (obj[cont] = obj[cont] || []).push(_val);\n\n              case 17:\n                _iteratorNormalCompletion = true;\n                _context.next = 9;\n                break;\n\n              case 20:\n                _context.next = 26;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](7);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 26:\n                _context.prev = 26;\n                _context.prev = 27;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 29:\n                _context.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context.finish(29);\n\n              case 33:\n                return _context.finish(26);\n\n              case 34:\n                return _context.abrupt(\"return\", obj);\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 22, 26, 34], [27,, 29, 33]]);\n      }));\n\n      function search(_x) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n  }], [{\n    key: \"normalize\",\n    value: function normalize(text) {\n      return text.toLowerCase().replace(/\\/|,/g, \" \").replace(/  /g, \" \");\n    }\n  }, {\n    key: \"splitUniq\",\n    value: function splitUniq() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _toConsumableArray(new Set(args.map(function (s) {\n        return TZFinder.normalize(s);\n      }).join(\" \").split(\" \")));\n    }\n  }]);\n\n  return TZFinder;\n}();","map":{"version":3,"sources":["/home/ankit/zil/cali-front/src/pages/NewEvent/Details/timezoneFinder.ts"],"names":["TZFinder","zones","index","all","createIndex","TZ","Object","entries","key","values","forEach","value","localeIndex","locale","push","str","splitUniq","val","path","word","obj","re","RegExp","matches","filter","some","s","test","Promise","rs","setImmediate","cont","text","toLowerCase","replace","args","Set","map","normalize","join","split"],"mappings":"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","sourcesContent":["export interface TZType {\n  [continent: string]: string[][];\n}\nexport type TZIndexType = Array<{\n  str: string[];\n  val: string[];\n  path: (string | number)[];\n}>;\n\nexport class TZFinder {\n  private index: TZIndexType;\n  private all: TZType;\n\n  constructor(zones: TZType) {\n    this.index = this.createIndex(zones);\n    this.all = zones;\n  }\n\n  getAll() {\n    return this.all;\n  }\n\n  private static normalize(text: string) {\n    return text\n      .toLowerCase()\n      .replace(/\\/|,/g, \" \")\n      .replace(/  /g, \" \");\n  }\n\n  private static splitUniq(...args: string[]) {\n    return [\n      ...new Set(\n        args\n          .map(s => TZFinder.normalize(s))\n          .join(\" \")\n          .split(\" \")\n      )\n    ];\n  }\n\n  private createIndex(TZ: TZType): TZIndexType {\n    let index: TZIndexType = [];\n    for (let [key, values] of Object.entries(TZ)) {\n      values.forEach((value, localeIndex) => {\n        let [locale] = value;\n        index.push({\n          str: TZFinder.splitUniq(key, locale),\n          val: value,\n          path: [key, localeIndex]\n        });\n      });\n    }\n    return index;\n  }\n\n  async search(word: string, index: TZIndexType = this.index) {\n    let obj: TZType = {};\n    let re = new RegExp(word, \"i\");\n    let matches = index.filter(({ str }) => str.some(s => re.test(s)));\n    for (let { path, val } of matches) {\n      await new Promise(rs => setImmediate(rs));\n      let [cont] = path;\n      (obj[cont] = obj[cont] || []).push(val);\n    }\n    return obj;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}