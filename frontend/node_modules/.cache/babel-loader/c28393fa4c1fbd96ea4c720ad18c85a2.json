{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport { createElement, Component } from 'react';\nimport getDisplayName from 'react-display-name';\nimport debounce from 'just-debounce-it';\n\nvar debounceHandler = function debounceHandler(handlerName, delay, leadingCall) {\n  return function (Target) {\n    var DebounceHandler = /*#__PURE__*/function (_Component) {\n      _inherits(DebounceHandler, _Component);\n\n      function DebounceHandler(props, context) {\n        var _this;\n\n        _classCallCheck(this, DebounceHandler);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DebounceHandler).call(this, props, context));\n        var delayValue = typeof delay === 'function' ? delay(props) : delay;\n        _this.debouncedPropInvoke = debounce(function () {\n          var _this$props;\n\n          return (_this$props = _this.props)[handlerName].apply(_this$props, arguments);\n        }, delayValue, leadingCall);\n\n        _this.handler = function (e) {\n          var _this2;\n\n          if (e && typeof e.persist === 'function') {\n            e.persist();\n          }\n\n          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            rest[_key - 1] = arguments[_key];\n          }\n\n          return (_this2 = _this).debouncedPropInvoke.apply(_this2, [e].concat(rest));\n        };\n\n        return _this;\n      }\n\n      _createClass(DebounceHandler, [{\n        key: \"render\",\n        value: function render() {\n          return createElement(Target, _objectSpread({}, this.props, _defineProperty({}, handlerName, this.handler)));\n        }\n      }]);\n\n      return DebounceHandler;\n    }(Component);\n\n    if (process.env.NODE_ENV !== 'production') {\n      DebounceHandler.displayName = \"debounceHandler(\".concat(getDisplayName(Target), \")\");\n    }\n\n    return DebounceHandler;\n  };\n};\n\nexport default debounceHandler;","map":null,"metadata":{},"sourceType":"module"}