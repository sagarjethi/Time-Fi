function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import { createElement, Component } from 'react';
import getDisplayName from 'react-display-name';
import debounce from 'just-debounce-it';

var debounceHandler = function debounceHandler(handlerName, delay, leadingCall) {
  return function (Target) {
    var DebounceHandler =
    /*#__PURE__*/
    function (_Component) {
      _inherits(DebounceHandler, _Component);

      function DebounceHandler(props, context) {
        var _this;

        _classCallCheck(this, DebounceHandler);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(DebounceHandler).call(this, props, context));
        var delayValue = typeof delay === 'function' ? delay(props) : delay;
        _this.debouncedPropInvoke = debounce(function () {
          var _this$props;

          return (_this$props = _this.props)[handlerName].apply(_this$props, arguments);
        }, delayValue, leadingCall);

        _this.handler = function (e) {
          var _this2;

          if (e && typeof e.persist === 'function') {
            e.persist();
          }

          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }

          return (_this2 = _this).debouncedPropInvoke.apply(_this2, [e].concat(rest));
        };

        return _this;
      }

      _createClass(DebounceHandler, [{
        key: "render",
        value: function render() {
          return createElement(Target, _objectSpread({}, this.props, _defineProperty({}, handlerName, this.handler)));
        }
      }]);

      return DebounceHandler;
    }(Component);

    if (process.env.NODE_ENV !== 'production') {
      DebounceHandler.displayName = "debounceHandler(".concat(getDisplayName(Target), ")");
    }

    return DebounceHandler;
  };
};

export default debounceHandler;