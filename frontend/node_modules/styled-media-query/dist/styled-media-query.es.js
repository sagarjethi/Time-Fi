import { css } from 'styled-components';

/**
 * Converts breakpoint units in px to rem or em
 * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value
 * @param {number} [16] ratio - size of 1 rem in px. What is your main font-size in px? 
 * @param {'rem' | 'em'} unit
 */
function pxToEmOrRem(breakpoints) {
  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;
  var unit = arguments[2];

  var newBreakpoints = {};

  for (var key in breakpoints) {
    var point = breakpoints[key];

    if (String(point).includes('px')) {
      newBreakpoints[key] = +(parseInt(point) / ratio) + unit;
      continue;
    }

    newBreakpoints[key] = point;
  }

  return newBreakpoints;
}

/**
 * Converts breakpoint units in px to em 
 * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value
 * @param {number} [16] ratio - size of 1em in px. What is your main font-size in px? 
 */
function pxToEm(breakpoints) {
  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;

  return pxToEmOrRem(breakpoints, ratio, 'em');
}

/**
 * Converts breakpoint units in px to rem 
 * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value
 * @param {number} [16] ratio - size of 1rem in px. What is your main font-size in px? 
 */
function pxToRem(breakpoints) {
  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;

  return pxToEmOrRem(breakpoints, ratio, 'rem');
}

var _templateObject = _taggedTemplateLiteralLoose(['\n    @media (max-width: ', ') {\n      ', '\n    }\n  '], ['\n    @media (max-width: ', ') {\n      ', '\n    }\n  ']);
var _templateObject2 = _taggedTemplateLiteralLoose(['\n    @media (min-width: ', ') {\n      ', '\n    }\n  '], ['\n    @media (min-width: ', ') {\n      ', '\n    }\n  ']);
var _templateObject3 = _taggedTemplateLiteralLoose(['\n    @media (min-width: ', ') and\n      (max-width: ', ') {\n      ', '\n    }\n  '], ['\n    @media (min-width: ', ') and\n      (max-width: ', ') {\n      ', '\n    }\n  ']);
var _templateObject4 = _taggedTemplateLiteralLoose(['\n          @media (max-width: ', ') {\n            ', '\n          }\n        '], ['\n          @media (max-width: ', ') {\n            ', '\n          }\n        ']);
var _templateObject5 = _taggedTemplateLiteralLoose(['\n          @media (min-width: ', ') {\n            ', '\n          }\n        '], ['\n          @media (min-width: ', ') {\n            ', '\n          }\n        ']);

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

/**
 * Default media breakpoints
 * @type {Object}
 */
var defaultBreakpoints = {
  huge: '1440px',
  large: '1170px',
  medium: '768px',
  small: '450px'
};

function getSizeFromBreakpoint(breakpointValue) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (breakpoints[breakpointValue]) {
    return breakpoints[breakpointValue];
  } else if (parseInt(breakpointValue)) {
    return breakpointValue;
  } else {
    console.error('styled-media-query: No valid breakpoint or size specified for media.');
    return '0';
  }
}

/**
 * Media query generator
 * @param {Object} breakpoints - Map labels to breakpoint sizes
 * @return {Object} - Media generators for each breakpoint
 */
function generateMedia() {
  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBreakpoints;

  var lessThan = function lessThan(breakpoint) {
    return function () {
      return css(_templateObject, getSizeFromBreakpoint(breakpoint, breakpoints), css.apply(undefined, arguments));
    };
  };

  var greaterThan = function greaterThan(breakpoint) {
    return function () {
      return css(_templateObject2, getSizeFromBreakpoint(breakpoint, breakpoints), css.apply(undefined, arguments));
    };
  };

  var between = function between(firstBreakpoint, secondBreakpoint) {
    return function () {
      return css(_templateObject3, getSizeFromBreakpoint(firstBreakpoint, breakpoints), getSizeFromBreakpoint(secondBreakpoint, breakpoints), css.apply(undefined, arguments));
    };
  };

  var oldStyle = Object.keys(breakpoints).reduce(function (acc, label) {
    var size = breakpoints[label];

    acc.to[label] = function () {
      console.warn('styled-media-query: Use media.lessThan(\'' + label + '\') instead of old media.to.' + label + ' (Probably we\'ll deprecate it)');
      return css(_templateObject4, size, css.apply(undefined, arguments));
    };

    acc.from[label] = function () {
      console.warn('styled-media-query: Use media.greaterThan(\'' + label + '\') instead of old media.from.' + label + ' (Probably we\'ll deprecate it)');
      return css(_templateObject5, size, css.apply(undefined, arguments));
    };

    return acc;
  }, { to: {}, from: {} });

  return Object.assign({
    lessThan: lessThan,
    greaterThan: greaterThan,
    between: between
  }, oldStyle);
}

/**
 * Media object with default breakpoints
 * @return {object} - Media generators for each size
 */
var index = generateMedia();

/**
 * Usage: styled.div` ${media.from.medium`background: #000;`} `;
 * With this code, background for small and medium sizes will be `default` and for more than medium, will be `#000`
 */

export { pxToEm, pxToRem, defaultBreakpoints, generateMedia };export default index;
//# sourceMappingURL=styled-media-query.es.js.map
