{"version":3,"file":"styled-media-query.umd.js","sources":["../src/convertors.js","../src/index.js"],"sourcesContent":["/**\n * Converts breakpoint units in px to rem or em\n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} [16] ratio - size of 1 rem in px. What is your main font-size in px? \n * @param {'rem' | 'em'} unit\n */\nfunction pxToEmOrRem(breakpoints, ratio = 16, unit) {\n  const newBreakpoints = {};\n\n  for (let key in breakpoints) {\n    const point = breakpoints[key];\n\n    if (String(point).includes('px')) {\n      newBreakpoints[key] = +(parseInt(point) / ratio) + unit;\n      continue;\n    }\n\n    newBreakpoints[key] = point;\n  }\n\n  return newBreakpoints;\n}\n\n/**\n * Converts breakpoint units in px to em \n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} [16] ratio - size of 1em in px. What is your main font-size in px? \n */\nexport function pxToEm(breakpoints, ratio = 16) {\n  return pxToEmOrRem(breakpoints, ratio, 'em');\n}\n\n/**\n * Converts breakpoint units in px to rem \n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} [16] ratio - size of 1rem in px. What is your main font-size in px? \n */\nexport function pxToRem(breakpoints, ratio = 16) {\n  return pxToEmOrRem(breakpoints, ratio, 'rem');\n}\n","import { css } from 'styled-components';\nimport { pxToEm, pxToRem } from './convertors';\n\nexport {\n  pxToEm,\n  pxToRem\n};\n\n/**\n * Default media breakpoints\n * @type {Object}\n */\nexport const defaultBreakpoints = {\n  huge: '1440px',\n  large: '1170px',\n  medium: '768px',\n  small: '450px',\n};\n\nfunction getSizeFromBreakpoint(breakpointValue, breakpoints = {}) {\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue];\n  } else if (parseInt(breakpointValue)) {\n    return breakpointValue;\n  } else {\n    console.error('styled-media-query: No valid breakpoint or size specified for media.');\n    return '0';\n  }\n}\n\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint sizes\n * @return {Object} - Media generators for each breakpoint\n */\nexport function generateMedia(breakpoints = defaultBreakpoints) {\n  const lessThan = (breakpoint) => (...args) => css`\n    @media (max-width: ${getSizeFromBreakpoint(breakpoint, breakpoints)}) {\n      ${css(...args)}\n    }\n  `;\n\n  const greaterThan = (breakpoint) => (...args) => css`\n    @media (min-width: ${getSizeFromBreakpoint(breakpoint, breakpoints)}) {\n      ${css(...args)}\n    }\n  `;\n\n  const between = (firstBreakpoint, secondBreakpoint) => (...args) => css`\n    @media (min-width: ${getSizeFromBreakpoint(firstBreakpoint, breakpoints)}) and\n      (max-width: ${getSizeFromBreakpoint(secondBreakpoint, breakpoints)}) {\n      ${css(...args)}\n    }\n  `;\n\n  const oldStyle = Object\n    .keys(breakpoints)\n    .reduce((acc, label) => {\n      const size = breakpoints[label];\n\n      acc.to[label] = (...args) => {\n        console.warn(`styled-media-query: Use media.lessThan('${label}') instead of old media.to.${label} (Probably we'll deprecate it)`);\n        return css`\n          @media (max-width: ${size}) {\n            ${css(...args)}\n          }\n        `;\n      };\n\n      acc.from[label] = (...args) => {\n        console.warn(`styled-media-query: Use media.greaterThan('${label}') instead of old media.from.${label} (Probably we'll deprecate it)`);\n        return css`\n          @media (min-width: ${size}) {\n            ${css(...args)}\n          }\n        `;\n      };\n\n      return acc;\n    },\n    { to: {}, from: {} }\n  );\n\n  return Object.assign(\n    {\n      lessThan,\n      greaterThan,\n      between,\n    },\n    oldStyle,\n  );\n}\n\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\nexport default generateMedia();\n\n/**\n * Usage: styled.div` ${media.from.medium`background: #000;`} `;\n * With this code, background for small and medium sizes will be `default` and for more than medium, will be `#000`\n */\n"],"names":["pxToEmOrRem","breakpoints","ratio","unit","newBreakpoints","key","point","String","includes","parseInt","getSizeFromBreakpoint","breakpointValue","error","generateMedia","defaultBreakpoints","oldStyle","Object","keys","reduce","acc","label","size","to","warn","css","from","assign","breakpoint","firstBreakpoint","secondBreakpoint"],"mappings":"8QAMA,SAASA,EAAYC,OAAaC,yDAAQ,GAAIC,eACtCC,SAED,IAAIC,KAAOJ,EAAa,KACrBK,EAAQL,EAAYI,GAEtBE,OAAOD,GAAOE,SAAS,QACVH,IAASI,SAASH,GAASJ,EAASC,IAItCE,GAAOC,SAGjBF,mCCDT,SAASM,EAAsBC,OAAiBV,mEAC1CA,EAAYU,GACPV,EAAYU,GACVF,SAASE,GACXA,WAECC,MAAM,wEACP,KASX,SAAgBC,QAAcZ,yDAAca,EAoBpCC,EAAWC,OACdC,KAAKhB,GACLiB,OAAO,SAACC,EAAKC,OACNC,EAAOpB,EAAYmB,YAErBE,GAAGF,GAAS,0BACNG,gDAAgDH,gCAAmCA,oCACpFI,QACgBH,EACjBG,kCAKJC,KAAKL,GAAS,0BACRG,mDAAmDH,kCAAqCA,oCACzFI,QACgBH,EACjBG,gCAKDL,IAEPG,MAAQG,iBAGLT,OAAOU,iBA/CG,SAACC,UAAe,kBAAaH,QACvBd,EAAsBiB,EAAY1B,GACnDuB,6CAIc,SAACG,UAAe,kBAAaH,QAC1Bd,EAAsBiB,EAAY1B,GACnDuB,yCAIU,SAACI,EAAiBC,UAAqB,kBAAaL,QAC7Cd,EAAsBkB,EAAiB3B,GAC5CS,EAAsBmB,EAAkB5B,GACpDuB,kCAsCJT,4vBA7ESD,QACL,eACC,gBACC,cACD,WAiFMD,aDrEf,SAAuBZ,UACdD,EAAYC,yDADuB,GACH,iBAQzC,SAAwBA,UACfD,EAAYC,yDADwB,GACJ"}